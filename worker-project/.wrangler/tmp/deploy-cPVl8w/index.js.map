{
  "version": 3,
  "sources": ["../../../emails/emails.js", "../../../handlers/users.js", "../../../handlers/orders.js", "../../../utils/slug.js", "../../../handlers/services.js", "../../../handlers/settings.js", "../../../handlers/admin.js", "../../../handlers/posts.js", "../../../handlers/tickets.js", "../../../handlers/subscribe.js", "../../../handlers/reviews.js", "../../../index.js"],
  "sourceRoot": "C:\\Users\\hrdwa\\Documents\\GitHub\\khadmatuk\\worker-project\\.wrangler\\tmp\\deploy-cPVl8w",
  "sourcesContent": ["// File: emails/emails.js\r\n\r\nexport async function sendEmailWithResend(emailData, env) {\r\n    if (!env.RESEND_API_KEY) {\r\n        console.error(\"Resend API Key is not set in environment secrets.\");\r\n        return new Response(JSON.stringify({ error: 'Email service not configured' }), { status: 500 });\r\n    }\r\n    const fromAddress = \"khadamatmaroc <support@khadamatmaroc.co.uk>\";\r\n    const response = await fetch(\"https://api.resend.com/emails\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\", \"Authorization\": `Bearer ${env.RESEND_API_KEY}` },\r\n        body: JSON.stringify({ from: fromAddress, to: emailData.to, subject: emailData.subject, html: emailData.html }),\r\n    });\r\n    if (!response.ok) {\r\n        const errorData = await response.json();\r\n        console.error(`Failed to send email via Resend: ${response.status} ${response.statusText}`, errorData);\r\n    } else {\r\n        const data = await response.json();\r\n        console.log(`Email sent successfully to ${emailData.to} via Resend. Message ID: ${data.id}`);\r\n    }\r\n    return response;\r\n}\r\n\r\nexport const emailStyles = {\r\n    body: `background-color: #f4f7f9; margin: 0; padding: 0; font-family: Cairo, Arial, sans-serif; -webkit-font-smoothing: antialiased;`,\r\n    container: `max-width: 600px; margin: 20px auto; background-color: #ffffff; border-radius: 16px; box-shadow: 0 20px 50px -10px rgba(0, 48, 143, 0.1); overflow: hidden; border: 1px solid #e9ecef;`,\r\n    header: `text-align: center; padding: 25px 20px; background-color: #e0f2fe;`, \r\n    headerImage: `height: 60px;`,\r\n    content: `padding: 40px 35px; text-align: right; direction: rtl; color: #343a40; line-height: 1.8;`,\r\n    h2: `color: #1d2d3d; font-weight: 900; margin-top: 0; font-size: 24px;`,\r\n    p: `margin: 1em 0; font-size: 16px;`,\r\n    hr: `border: none; border-top: 1px solid #e9ecef; margin: 30px 0;`,\r\n    button: `display: inline-block; padding: 14px 28px; background-color: #0056b3; color: #ffffff !important; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; transition: all 0.3s ease;`,\r\n    cancellationBox: `background-color: #fffbe6; border: 1px solid #ffe58f; border-radius: 8px; padding: 20px; margin: 25px 0;`,\r\n    footer: `text-align: center; padding: 25px 30px; background-color: #f8f9fa; font-size: 13px; color: #6c757d; border-top: 1px solid #e9ecef;`\r\n};\r\n\r\nexport function getEmailTemplateWrapper(title, content) {\r\n    const logoUrl = \"https://raw.githubusercontent.com/radwanyhassan75/logo.png/main/20832c91-c5a0-4bb1-a95f-b8c8bd097d7a-removebg-preview.png\";\r\n    return `\r\n    <div style=\"${emailStyles.body}\">\r\n      <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n        <tr>\r\n          <td align=\"center\" style=\"padding: 20px;\">\r\n            <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" style=\"${emailStyles.container}\">\r\n              <tr><td style=\"${emailStyles.header}\"><img src=\"${logoUrl}\" alt=\"\u0634\u0639\u0627\u0631 \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0631\u0642\u0645\u064A\" style=\"${emailStyles.headerImage}\"></td></tr>\r\n              <tr><td style=\"${emailStyles.content}\">${content}</td></tr>\r\n              <tr>\r\n                <td style=\"${emailStyles.footer}\">\r\n                  <p style=\"margin:0;\">&copy; ${new Date().getFullYear()} \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0631\u0642\u0645\u064A. \u062C\u0645\u064A\u0639 \u0627\u0644\u062D\u0642\u0648\u0642 \u0645\u062D\u0641\u0648\u0638\u0629.</p>\r\n                  <p style=\"margin-top: 10px;\">\u0647\u0644 \u062A\u062D\u062A\u0627\u062C \u0625\u0644\u0649 \u0645\u0633\u0627\u0639\u062F\u0629\u061F <a href=\"https://khadamat.pages.dev/contact.html\" style=\"color: #0056b3; text-decoration: underline;\">\u062A\u0648\u0627\u0635\u0644 \u0645\u0639\u0646\u0627</a>.</p>\r\n                </td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>`;\r\n}\r\n\r\nexport function getCustomVerificationEmailHTML(displayName, verificationLink) {\r\n    const content = `\r\n        <h2 style=\"${emailStyles.h2}\">\u0645\u0631\u062D\u0628\u0627\u064B \u0628\u0643 ${displayName}!</h2>\r\n        <p style=\"${emailStyles.p}\">\u0634\u0643\u0631\u0627\u064B \u0644\u062A\u0633\u062C\u064A\u0644\u0643 \u0641\u064A <strong>\u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0631\u0642\u0645\u064A</strong>. \u0644\u0645 \u064A\u062A\u0628\u0642 \u0633\u0648\u0649 \u062E\u0637\u0648\u0629 \u0648\u0627\u062D\u062F\u0629 \u0644\u062A\u0641\u0639\u064A\u0644 \u062D\u0633\u0627\u0628\u0643.</p>\r\n        <p style=\"text-align: center; margin: 30px 0;\">\r\n            <a href=\"${verificationLink}\" style=\"${emailStyles.button}\">\u062A\u0623\u0643\u064A\u062F \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A</a>\r\n        </p>`;\r\n    return getEmailTemplateWrapper('\u062A\u0623\u0643\u064A\u062F \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A', content);\r\n}\r\n\r\nexport function getOrderConfirmationHTML(order) {\r\n    const content = `\r\n    <h2 style=\"${emailStyles.h2}\">\u0634\u0643\u0631\u0627\u064B \u0644\u0637\u0644\u0628\u0643\u060C ${order.customerName}!</h2>\r\n    <p style=\"${emailStyles.p}\">\u0644\u0642\u062F \u0627\u0633\u062A\u0644\u0645\u0646\u0627 \u0637\u0644\u0628\u0643 \u0628\u0646\u062C\u0627\u062D \u0648\u0633\u0646\u0628\u062F\u0623 \u0641\u064A \u0645\u0639\u0627\u0644\u062C\u062A\u0647 \u0642\u0631\u064A\u0628\u0627\u064B.</p>\r\n    <div style=\"background-color: #f8f9fa; border-radius: 12px; padding: 25px; margin: 25px 0;\">\r\n      <table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"text-align: right; font-size: 15px;\">\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0631\u0642\u0645 \u0627\u0644\u0637\u0644\u0628:</td><td style=\"padding: 8px 0; font-weight: bold;\">${order.id}</td></tr>\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0627\u0633\u0645 \u0627\u0644\u062E\u062F\u0645\u0629:</td><td style=\"padding: 8px 0;\">${order.serviceName}</td></tr>\r\n      </table>\r\n    </div>`;\r\n    return getEmailTemplateWrapper('\u062A\u0623\u0643\u064A\u062F \u0627\u0644\u0637\u0644\u0628', content);\r\n}\r\n\r\nexport function getOrderUpdateHTML(order, updates) {\r\n    const statusTranslations = {\r\n        'in progress': '\u0642\u064A\u062F \u0627\u0644\u0645\u0639\u0627\u0644\u062C\u0629',\r\n        'completed': '\u0645\u0643\u062A\u0645\u0644',\r\n        'cancelled': '\u0645\u0644\u063A\u064A',\r\n        'payment processing': '\u0642\u064A\u062F \u0645\u0631\u0627\u062C\u0639\u0629 \u0627\u0644\u062F\u0641\u0639',\r\n        'payment verified': '\u062A\u0645 \u0627\u0644\u062A\u062D\u0642\u0642 \u0645\u0646 \u0627\u0644\u062F\u0641\u0639',\r\n        'payment cancelled': '\u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0627\u0644\u062F\u0641\u0639'\r\n    };\r\n\r\n    const newStatusText = statusTranslations[updates.status] || updates.status;\r\n    const updateDate = new Date().toLocaleString('ar-EG', { dateStyle: 'full', timeStyle: 'short' });\r\n    let title = `\u062A\u062D\u062F\u064A\u062B \u0628\u062E\u0635\u0648\u0635 \u0637\u0644\u0628\u0643 #${order.id}`;\r\n    let mainContent = `<p style=\"${emailStyles.p}\">\u0645\u0631\u062D\u0628\u0627\u064B ${order.customerName},</p>`;\r\n    let cancellationReasonContent = '';\r\n    let buttonUrl = '';\r\n    let buttonText = '';\r\n\r\n    if (updates.updateType === 'order') {\r\n        title = `\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0637\u0644\u0628\u0643 \u0625\u0644\u0649: ${newStatusText}`;\r\n        mainContent += `<p style=\"${emailStyles.p}\">\u0646\u0648\u062F \u0625\u0639\u0644\u0627\u0645\u0643 \u0628\u0623\u0646\u0647 \u062A\u0645 \u062A\u063A\u064A\u064A\u0631 \u062D\u0627\u0644\u0629 \u0637\u0644\u0628\u0643 <strong>\"${order.serviceName}\"</strong>.</p>`;\r\n        \r\n        if (updates.status === 'cancelled') {\r\n            title = `\u0644\u0644\u0623\u0633\u0641\u060C \u062A\u0645 \u0625\u0644\u063A\u0627\u0621 \u0637\u0644\u0628\u0643 #${order.id}`;\r\n            if (updates.cancellationReason) {\r\n                cancellationReasonContent = `\r\n                <div style=\"${emailStyles.cancellationBox}\">\r\n                    <p style=\"margin:0; font-weight: bold;\">\u0633\u0628\u0628 \u0627\u0644\u0625\u0644\u063A\u0627\u0621:</p>\r\n                    <p style=\"margin-top: 5px;\">${updates.cancellationReason}</p>\r\n                </div>`;\r\n            }\r\n            buttonUrl = `https://khadamat.pages.dev/contact.html`;\r\n            buttonText = '\u062A\u0648\u0627\u0635\u0644 \u0645\u0639 \u0627\u0644\u062F\u0639\u0645';\r\n        } else if (updates.status === 'completed') {\r\n            title = `\uD83C\uDF89 \u0637\u0644\u0628\u0643 #${order.id} \u0642\u062F \u0627\u0643\u062A\u0645\u0644!`;\r\n            buttonText = '\u0639\u0631\u0636 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0637\u0644\u0628';\r\n        } else {\r\n            buttonText = '\u0645\u062A\u0627\u0628\u0639\u0629 \u062D\u0627\u0644\u0629 \u0627\u0644\u0637\u0644\u0628';\r\n        }\r\n    } else if (updates.updateType === 'payment') {\r\n        title = `\u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u062F\u0641\u0639 \u0644\u0637\u0644\u0628\u0643 #${order.id}`;\r\n        mainContent += `<p style=\"${emailStyles.p}\">\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u062F\u0641\u0639 \u0644\u0637\u0644\u0628\u0643 \u0625\u0644\u0649 <strong>\"${newStatusText}\"</strong>.</p>`;\r\n        buttonText = '\u0639\u0631\u0636 \u062A\u0641\u0627\u0635\u064A\u0644 \u0627\u0644\u0637\u0644\u0628';\r\n    }\r\n\r\n    if (!buttonUrl) {\r\n        if (order.userId === 'guest-user') {\r\n            buttonUrl = `https://khadamat.pages.dev/track-order.html?orderId=${order.id}`;\r\n        } else {\r\n            buttonUrl = `https://khadamat.pages.dev/my-account.html`;\r\n        }\r\n    }\r\n    \r\n    const content = `\r\n        <h2 style=\"${emailStyles.h2}\">${title}</h2>\r\n        ${mainContent}\r\n        ${cancellationReasonContent}\r\n        <div style=\"background-color: #f8f9fa; border-radius: 12px; padding: 25px; margin: 25px 0;\">\r\n          <table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"text-align: right; font-size: 15px;\">\r\n            <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0627\u0644\u062D\u0627\u0644\u0629 \u0627\u0644\u062C\u062F\u064A\u062F\u0629:</td><td style=\"padding: 8px 0; font-weight: bold;\">${newStatusText}</td></tr>\r\n            <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u062A\u0627\u0631\u064A\u062E \u0627\u0644\u062A\u062D\u062F\u064A\u062B:</td><td style=\"padding: 8px 0;\">${updateDate}</td></tr>\r\n          </table>\r\n        </div>\r\n        <p style=\"text-align: center; margin: 30px 0;\">\r\n            <a href=\"${buttonUrl}\" style=\"${emailStyles.button}\">${buttonText}</a>\r\n        </p>\r\n    `;\r\n    return getEmailTemplateWrapper('\u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u0637\u0644\u0628', content);\r\n}\r\n\r\nexport function getSupportTicketConfirmationHTML(ticket) {\r\n    const content = `\r\n    <h2 style=\"${emailStyles.h2}\">\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u062A\u0630\u0643\u0631\u0629 \u0627\u0644\u062F\u0639\u0645 \u0627\u0644\u062E\u0627\u0635\u0629 \u0628\u0643</h2>\r\n    <p style=\"${emailStyles.p}\">\u0645\u0631\u062D\u0628\u0627\u064B ${ticket.userName},</p>\r\n    <p style=\"${emailStyles.p}\">\u0644\u0642\u062F \u0627\u0633\u062A\u0644\u0645\u0646\u0627 \u0637\u0644\u0628 \u0627\u0644\u062F\u0639\u0645 \u0627\u0644\u062E\u0627\u0635 \u0628\u0643 \u0628\u0646\u062C\u0627\u062D.</p>\r\n    <div style=\"background-color: #f8f9fa; border-radius: 12px; padding: 25px; margin: 25px 0;\">\r\n      <table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"text-align: right; font-size: 15px;\">\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0631\u0642\u0645 \u0627\u0644\u062A\u0630\u0643\u0631\u0629:</td><td style=\"padding: 8px 0; font-weight: bold;\">${ticket.id}</td></tr>\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0627\u0644\u0645\u0648\u0636\u0648\u0639:</td><td style=\"padding: 8px 0;\">${ticket.subject}</td></tr>\r\n      </table>\r\n    </div>\r\n    <p style=\"text-align: center; margin: 30px 0;\">\r\n      <a href=\"https://khadamat.pages.dev/track-ticket.html\" style=\"${emailStyles.button}\">\u0645\u062A\u0627\u0628\u0639\u0629 \u062D\u0627\u0644\u0629 \u0627\u0644\u062A\u0630\u0643\u0631\u0629</a>\r\n    </p>`;\r\n    return getEmailTemplateWrapper('\u062A\u0623\u0643\u064A\u062F \u0627\u0633\u062A\u0644\u0627\u0645 \u062A\u0630\u0643\u0631\u0629 \u0627\u0644\u062F\u0639\u0645', content);\r\n}\r\n\r\nexport function getAdminNewTicketNotificationHTML(ticket) {\r\n    const content = `\r\n    <h2 style=\"${emailStyles.h2}\">\u062A\u0646\u0628\u064A\u0647: \u062A\u0630\u0643\u0631\u0629 \u062F\u0639\u0645 \u062C\u062F\u064A\u062F\u0629</h2>\r\n    <p style=\"${emailStyles.p}\">\u062A\u0645 \u0625\u0646\u0634\u0627\u0621 \u062A\u0630\u0643\u0631\u0629 \u062F\u0639\u0645 \u062C\u062F\u064A\u062F\u0629.</p>\r\n    <div style=\"background-color: #f8f9fa; border-radius: 12px; padding: 25px; margin: 25px 0;\">\r\n      <table width=\"100%\" cellspacing=\"0\" cellpadding=\"0\" style=\"text-align: right; font-size: 15px;\">\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0631\u0642\u0645 \u0627\u0644\u062A\u0630\u0643\u0631\u0629:</td><td style=\"padding: 8px 0; font-weight: bold;\">${ticket.id}</td></tr>\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0627\u0633\u0645 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:</td><td style=\"padding: 8px 0;\">${ticket.userName}</td></tr>\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0628\u0631\u064A\u062F \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645:</td><td style=\"padding: 8px 0;\">${ticket.userEmail}</td></tr>\r\n        <tr><td style=\"padding: 8px 0; color: #6c757d;\">\u0627\u0644\u0645\u0648\u0636\u0648\u0639:</td><td style=\"padding: 8px 0;\">${ticket.subject}</td></tr>\r\n      </table>\r\n    </div>`;\r\n    return getEmailTemplateWrapper('\u062A\u0630\u0643\u0631\u0629 \u062F\u0639\u0645 \u062C\u062F\u064A\u062F\u0629', content);\r\n}\r\n\r\nexport function getNewMessageNotificationHTML(ticketId) {\r\n    const content = `\r\n    <h2 style=\"${emailStyles.h2}\">\u0644\u062F\u064A\u0643 \u0631\u062F \u062C\u062F\u064A\u062F \u0639\u0644\u0649 \u062A\u0630\u0643\u0631\u062A\u0643</h2>\r\n    <p style=\"${emailStyles.p}\">\u0644\u0642\u062F \u0642\u0627\u0645 \u0641\u0631\u064A\u0642 \u0627\u0644\u062F\u0639\u0645 \u0628\u0627\u0644\u0631\u062F \u0639\u0644\u0649 \u062A\u0630\u0643\u0631\u062A\u0643 \u0631\u0642\u0645 <strong>${ticketId}</strong>.</p>\r\n    <p style=\"text-align: center; margin: 30px 0;\">\r\n      <a href=\"https://khadamat.pages.dev/track-ticket.html\" style=\"${emailStyles.button}\">\u0639\u0631\u0636 \u0627\u0644\u0631\u062F \u0627\u0644\u0622\u0646</a>\r\n    </p>`;\r\n    return getEmailTemplateWrapper('\u0631\u062F \u062C\u062F\u064A\u062F \u0639\u0644\u0649 \u062A\u0630\u0643\u0631\u062A\u0643', content);\r\n}\r\n\r\nexport function getSubscriptionConfirmationHTML() {\r\n    const content = `<h2 style=\"${emailStyles.h2}\">\u0634\u0643\u0631\u0627\u064B \u0644\u0627\u0634\u062A\u0631\u0627\u0643\u0643!</h2><p style=\"${emailStyles.p}\">\u0644\u0642\u062F \u062A\u0645 \u062A\u0623\u0643\u064A\u062F \u0627\u0634\u062A\u0631\u0627\u0643\u0643 \u0641\u064A \u0627\u0644\u0646\u0634\u0631\u0629 \u0627\u0644\u0628\u0631\u064A\u062F\u064A\u0629 \u0628\u0646\u062C\u0627\u062D.</p>`;\r\n    return getEmailTemplateWrapper('\u062A\u0623\u0643\u064A\u062F \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643', content);\r\n}\r\n\r\nexport async function handleEmails(request, env) {\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n    if (request.method !== 'POST') return new Response(JSON.stringify({ error: 'Method not allowed' }), { status: 405 });\r\n    \r\n    const { email, displayName, verificationLink } = await request.json();\r\n    if (!email || !displayName || !verificationLink) return new Response(JSON.stringify({ error: 'Missing required fields' }), { status: 400 });\r\n\r\n    const emailHtml = getCustomVerificationEmailHTML(displayName, verificationLink);\r\n    const emailData = { to: email, subject: '\u2705 \u0623\u0643\u0651\u062F \u0628\u0631\u064A\u062F\u0643 \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A - \u0627\u0644\u0645\u0643\u062A\u0628 \u0627\u0644\u0631\u0642\u0645\u064A', html: emailHtml };\r\n    \r\n    const emailResponse = await sendEmailWithResend(emailData, env);\r\n    return emailResponse.ok \r\n        ? new Response(JSON.stringify({ success: true }), { status: 200, headers: corsHeaders })\r\n        : new Response(JSON.stringify({ error: 'Failed to send verification email' }), { status: 500, headers: corsHeaders });\r\n}", "// File: handlers/users.js\r\n\r\nexport async function handleUsers(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const { pathname } = url;\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    const pathParts = pathname.split('/').filter(Boolean);\r\n    const isStatusCheck = pathParts[pathParts.length - 1] === 'status';\r\n    const userId = pathParts.length > 1 && !isStatusCheck ? pathParts[pathParts.length - 1] : (isStatusCheck ? pathParts[pathParts.length - 2] : null);\r\n\r\n    if (request.method === \"GET\" && userId && isStatusCheck) {\r\n        try {\r\n            const user = await env.DB.prepare(\"SELECT role FROM users WHERE id = ?\").bind(userId).first();\r\n            if (user && user.role === 'admin') {\r\n                return new Response(JSON.stringify({ isAdmin: true }), { status: 200, headers: corsHeaders });\r\n            }\r\n            return new Response(JSON.stringify({ isAdmin: false }), { status: 200, headers: corsHeaders });\r\n        } catch (error) {\r\n            console.error(\"User status check error:\", error);\r\n            return new Response(JSON.stringify({ isAdmin: false }), { status: 500, headers: corsHeaders });\r\n        }\r\n    }\r\n\r\n    else if (request.method === \"GET\" && !userId) { // \u062C\u0644\u0628 \u0643\u0644 \u0627\u0644\u0645\u0633\u062A\u062E\u062F\u0645\u064A\u0646\r\n        const defaultPicture = 'https://via.placeholder.com/150';\r\n        const { results } = await env.DB.prepare(\r\n            \"SELECT u.id, u.email, u.displayName, u.createdAt, u.status, COALESCE(u.profilePicture, ?) as profilePicture, COUNT(o.id) as totalOrders FROM users u LEFT JOIN orders o ON u.id = o.userId GROUP BY u.id ORDER BY u.createdAt DESC\"\r\n        ).bind(defaultPicture).all();\r\n        return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n    }\r\n\r\n    else if (request.method === \"POST\") { // \u0625\u0646\u0634\u0627\u0621 \u0645\u0633\u062A\u062E\u062F\u0645 \u062C\u062F\u064A\u062F\r\n        try {\r\n            const newUser = await request.json();\r\n            if (!newUser.id || !newUser.email) {\r\n                return new Response(JSON.stringify({ error: \"User ID and Email are required\" }), { status: 400, headers: corsHeaders });\r\n            }\r\n            \r\n            await env.DB.prepare(\r\n                \"INSERT INTO users (id, email, displayName, createdAt, status, profilePicture, role, provider) VALUES (?, ?, ?, ?, 'pending_verification', ?, 'customer', ?)\"\r\n            ).bind(\r\n                newUser.id, \r\n                newUser.email, \r\n                newUser.displayName || null, \r\n                new Date().toISOString(), \r\n                newUser.profilePicture || 'https://via.placeholder.com/150',\r\n                newUser.provider || 'email'\r\n            ).run();\r\n            \r\n            return new Response(JSON.stringify({ success: true, message: \"User created successfully\" }), { status: 201, headers: corsHeaders });\r\n        } catch (error) {\r\n            console.error('Error creating user:', error);\r\n            return new Response(JSON.stringify({ error: \"Failed to create user: \" + error.message }), { status: 500, headers: corsHeaders });\r\n        }\r\n    }\r\n    \r\n    else if (request.method === \"PUT\" && userId) { // \u062A\u062D\u062F\u064A\u062B \u0628\u064A\u0627\u0646\u0627\u062A \u0645\u0633\u062A\u062E\u062F\u0645\r\n        const { status, profilePicture } = await request.json();\r\n        if (!status && !profilePicture) {\r\n            return new Response(JSON.stringify({ error: \"At least one field is required\" }), { status: 400, headers: corsHeaders });\r\n        }\r\n        \r\n        let query = \"UPDATE users SET\";\r\n        const params = [];\r\n        if (status) { \r\n            query += \" status = ?,\"; \r\n            params.push(status); \r\n        }\r\n        if (profilePicture) { \r\n            query += \" profilePicture = ?,\"; \r\n            params.push(profilePicture); \r\n        }\r\n        query = query.slice(0, -1) + \" WHERE id = ?\";\r\n        params.push(userId);\r\n        \r\n        await env.DB.prepare(query).bind(...params).run();\r\n        return new Response(JSON.stringify({ message: \"User updated successfully\" }), { status: 200, headers: corsHeaders });\r\n    }\r\n    \r\n    else if (request.method === \"DELETE\" && userId) { // \u062D\u0630\u0641 \u0645\u0633\u062A\u062E\u062F\u0645\r\n        await env.DB.prepare(\"DELETE FROM users WHERE id = ?\").bind(userId).run();\r\n        return new Response(JSON.stringify({ message: \"User deleted successfully\" }), { status: 200, headers: corsHeaders });\r\n    }\r\n\r\n    // fallback\r\n    return new Response(JSON.stringify({ error: \"User route not found\" }), { status: 404, headers: corsHeaders });\r\n}", "// File: handlers/orders.js\r\n\r\nimport { sendEmailWithResend, getOrderConfirmationHTML, getOrderUpdateHTML } from '../emails/emails.js';\r\n\r\nexport async function handleOrders(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const { pathname } = url;\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    const pathParts = pathname.split('/').filter(Boolean);\r\n    const orderId = pathParts.find(p => p.startsWith('KH-'));\r\n\r\n    // --- GET (Fetch single order) ---\r\n    if (request.method === \"GET\" && orderId) {\r\n        const order = await env.DB.prepare(\"SELECT * FROM orders WHERE id = ?\").bind(orderId).first();\r\n        if (!order) {\r\n            return new Response(JSON.stringify({ error: \"Order not found\" }), { status: 404, headers: corsHeaders });\r\n        }\r\n        return new Response(JSON.stringify(order), { status: 200, headers: corsHeaders });\r\n    }\r\n\r\n    // --- GET (Fetch all orders or by userId) ---\r\n    if (request.method === \"GET\") {\r\n        const userId = url.searchParams.get('userId');\r\n        if (userId) {\r\n            const { results } = await env.DB.prepare(\"SELECT * FROM orders WHERE userId = ? ORDER BY createdAt DESC\").bind(userId).all();\r\n            return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n        } else {\r\n            const { results } = await env.DB.prepare(\"SELECT * FROM orders ORDER BY createdAt DESC\").all();\r\n            return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n        }\r\n    } \r\n    \r\n    // --- POST (Create new order) ---\r\n    else if (request.method === \"POST\") {\r\n        const formData = await request.formData();\r\n        const newOrderId = `KH-${Date.now()}`;\r\n        \r\n        const orderData = {\r\n            id: newOrderId,\r\n            userId: formData.get('userId') || 'guest-user',\r\n            customerName: formData.get('customerName'),\r\n            email: formData.get('email'),\r\n            serviceName: formData.get('serviceName'),\r\n            // \u062A\u0645 \u062A\u063A\u064A\u064A\u0631 \u0627\u0644\u062D\u0627\u0644\u0627\u062A \u0627\u0644\u0627\u0641\u062A\u0631\u0627\u0636\u064A\u0629 \u0644\u0644\u063A\u0629 \u0627\u0644\u0625\u0646\u062C\u0644\u064A\u0632\u064A\u0629 \u0644\u062A\u0643\u0648\u0646 \u0645\u062A\u0648\u0627\u0641\u0642\u0629 \u0645\u0639 \u0627\u0644\u0646\u0638\u0627\u0645\r\n            status: \"in progress\", \r\n            paymentStatus: \"payment processing\",\r\n            createdAt: new Date().toISOString(),\r\n            paymentAmount: parseFloat(formData.get('price')) || 0,\r\n            paymentMethod: formData.get('paymentMethod'),\r\n            phone: formData.get('phone'),\r\n            price: parseFloat(formData.get('price')) || 0,\r\n            serviceDetails: formData.get('serviceDetails'),\r\n            receiptUrl: null, // \u0633\u064A\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0647\u0630\u0627 \u0644\u0627\u062D\u0642\u0627\u064B \u0625\u0630\u0627 \u062A\u0645 \u0631\u0641\u0639 \u0625\u064A\u0635\u0627\u0644\r\n            cancellationReason: null,\r\n            paymentCancellationReason: null\r\n        };\r\n\r\n        // ... (Your R2 Upload Logic should be here if needed)\r\n\r\n        await env.DB.prepare(\r\n            \"INSERT INTO orders (id, userId, customerName, email, serviceName, status, paymentStatus, createdAt, paymentAmount, paymentMethod, phone, price, serviceDetails, receiptUrl, cancellationReason, paymentCancellationReason) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\"\r\n        ).bind(...Object.values(orderData)).run();\r\n\r\n        ctx.waitUntil(sendEmailWithResend({ to: orderData.email, subject: `\u2705 \u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u0637\u0644\u0628\u0643 \u0628\u0646\u062C\u0627\u062D - \u0631\u0642\u0645 \u0627\u0644\u0637\u0644\u0628: ${orderData.id}`, html: getOrderConfirmationHTML(orderData) }, env));\r\n        \r\n        return new Response(JSON.stringify({ success: true, orderId: newOrderId }), { status: 201, headers: corsHeaders });\r\n    } \r\n    \r\n    // --- PUT (Update order) - [ \u062A\u0645 \u0627\u0644\u0625\u0635\u0644\u0627\u062D \u0648\u0627\u0644\u062A\u0637\u0648\u064A\u0631 \u0647\u0646\u0627 ] ---\r\n    else if (request.method === \"PUT\" && orderId) {\r\n        const updates = await request.json();\r\n        \r\n        let fieldsToUpdate = [];\r\n        let params = [];\r\n        let query;\r\n\r\n        // \u0645\u0646\u0637\u0642 \u0630\u0643\u064A \u0644\u0644\u062A\u0645\u064A\u064A\u0632 \u0628\u064A\u0646 \u062A\u062D\u062F\u064A\u062B \u062D\u0627\u0644\u0629 \u0627\u0644\u0637\u0644\u0628 \u0648\u062D\u0627\u0644\u0629 \u0627\u0644\u062F\u0641\u0639\r\n        if (updates.updateType === 'order') {\r\n            if (updates.status) {\r\n                fieldsToUpdate.push(\"status = ?\");\r\n                params.push(updates.status);\r\n            }\r\n            if (updates.cancellationReason !== undefined) {\r\n                fieldsToUpdate.push(\"cancellationReason = ?\");\r\n                params.push(updates.cancellationReason);\r\n            }\r\n        } else if (updates.updateType === 'payment') {\r\n            if (updates.status) { // \u0627\u0644\u0644\u0648\u062D\u0629 \u0627\u0644\u0623\u0645\u0627\u0645\u064A\u0629 \u062A\u0631\u0633\u0644 \u0627\u0644\u062D\u0627\u0644\u0629 \u062A\u062D\u062A \u0627\u0633\u0645 'status'\r\n                fieldsToUpdate.push(\"paymentStatus = ?\");\r\n                params.push(updates.status);\r\n            }\r\n            if (updates.paymentCancellationReason !== undefined) {\r\n                fieldsToUpdate.push(\"paymentCancellationReason = ?\");\r\n                params.push(updates.paymentCancellationReason);\r\n            }\r\n        }\r\n\r\n        if (fieldsToUpdate.length === 0) {\r\n            return new Response(JSON.stringify({ error: \"No valid fields to update\" }), { status: 400, headers: corsHeaders });\r\n        }\r\n\r\n        params.push(orderId);\r\n        query = `UPDATE orders SET ${fieldsToUpdate.join(\", \")} WHERE id = ?`;\r\n        \r\n        await env.DB.prepare(query).bind(...params).run();\r\n        \r\n        // -- \u062A\u0641\u0639\u064A\u0644 \u0625\u0631\u0633\u0627\u0644 \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0639\u0646\u062F \u0627\u0644\u062A\u062D\u062F\u064A\u062B --\r\n        const updatedOrder = await env.DB.prepare(\"SELECT * FROM orders WHERE id = ?\").bind(orderId).first();\r\n        if (updatedOrder) {\r\n            const emailHtml = getOrderUpdateHTML(updatedOrder, updates);\r\n            const emailSubject = `\uD83D\uDD14 \u062A\u062D\u062F\u064A\u062B \u0628\u062E\u0635\u0648\u0635 \u0637\u0644\u0628\u0643 \u0631\u0642\u0645: ${updatedOrder.id}`;\r\n            ctx.waitUntil(sendEmailWithResend({ to: updatedOrder.email, subject: emailSubject, html: emailHtml }, env));\r\n        }\r\n        \r\n        return new Response(JSON.stringify({ message: \"\u062A\u0645 \u062A\u062D\u062F\u064A\u062B \u0627\u0644\u0637\u0644\u0628 \u0628\u0646\u062C\u0627\u062D\" }), { status: 200, headers: corsHeaders });\r\n    } \r\n    \r\n    // --- DELETE (Delete order) ---\r\n    else if (request.method === \"DELETE\" && orderId) {\r\n        await env.DB.prepare(\"DELETE FROM orders WHERE id = ?\").bind(orderId).run();\r\n        return new Response(JSON.stringify({ message: \"\u062A\u0645 \u062D\u0630\u0641 \u0627\u0644\u0637\u0644\u0628 \u0628\u0646\u062C\u0627\u062D\" }), { status: 200, headers: corsHeaders });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ error: \"Order route not found\" }), { status: 404, headers: corsHeaders });\r\n}", "// File: utils/slug.js\r\nexport function generateSlug(text) {\r\n    if (!text) return '';\r\n    return text.toString().toLowerCase()\r\n        .replace(/\\s+/g, '-')\r\n        .replace(/[^\\u0600-\\u06FF\\w\\-]+/g, '')\r\n        .replace(/\\-\\-+/g, '-')\r\n        .replace(/^-+/, '')\r\n        .replace(/-+$/, '');\r\n}", "// File: handlers/services.js\r\n\r\n// \u0646\u0633\u062A\u0648\u0631\u062F \u0648\u0638\u064A\u0641\u0629 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0645\u0646 \u0645\u0644\u0641 \u0627\u0644\u0623\u062F\u0648\u0627\u062A \u0627\u0644\u0645\u0633\u0627\u0639\u062F\u0629\r\nimport { generateSlug } from '../utils/slug.js';\r\n\r\nexport async function handleServices(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const { pathname } = url;\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    const isAdminRoute = pathname.includes('/admin/');\r\n    const pathParts = pathname.split('/').filter(Boolean);\r\n    \r\n    // \u0637\u0631\u0642 \u0645\u062E\u062A\u0644\u0641\u0629 \u0644\u062A\u062D\u062F\u064A\u062F \u0627\u0644\u062E\u062F\u0645\u0629 \u0627\u0644\u0645\u0637\u0644\u0648\u0628\u0629\r\n    const slug = pathname.includes('/slug/') ? decodeURIComponent(pathParts[pathParts.length - 1]) : null;\r\n    const serviceId = pathParts.find(p => p.startsWith('serv_'));\r\n\r\n    if (request.method === 'GET') {\r\n        if (slug) { // \u062C\u0644\u0628 \u062E\u062F\u0645\u0629 \u0639\u0646 \u0637\u0631\u064A\u0642 \u0627\u0644\u0631\u0627\u0628\u0637 (slug)\r\n            const service = await env.DB.prepare(\"SELECT * FROM services WHERE slug = ? AND status = 'available'\").bind(slug).first();\r\n            if (!service) return new Response(JSON.stringify({ error: 'Service not found' }), { status: 404, headers: corsHeaders });\r\n            return new Response(JSON.stringify(service), { status: 200, headers: corsHeaders });\r\n        \r\n        } else if (serviceId) { // \u062C\u0644\u0628 \u062E\u062F\u0645\u0629 \u0639\u0646 \u0637\u0631\u064A\u0642 \u0627\u0644\u0640 ID\r\n            const service = await env.DB.prepare(\"SELECT * FROM services WHERE id = ?\").bind(serviceId).first();\r\n            if (!service) return new Response(JSON.stringify({ error: 'Service not found' }), { status: 404, headers: corsHeaders });\r\n            return new Response(JSON.stringify(service), { status: 200, headers: corsHeaders });\r\n        \r\n        } else { // \u062C\u0644\u0628 \u0643\u0644 \u0627\u0644\u062E\u062F\u0645\u0627\u062A\r\n            // \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u0645\u0633\u0627\u0631 \u064A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 'admin'\u060C \u0646\u0639\u0631\u0636 \u0643\u0644 \u0627\u0644\u062E\u062F\u0645\u0627\u062A\u060C \u0648\u0625\u0644\u0627 \u0646\u0639\u0631\u0636 \u0627\u0644\u062E\u062F\u0645\u0627\u062A \u0627\u0644\u0645\u062A\u0627\u062D\u0629 \u0641\u0642\u0637\r\n            const query = isAdminRoute \r\n                ? \"SELECT * FROM services ORDER BY created_at DESC\" \r\n                : \"SELECT * FROM services WHERE status = 'available' ORDER BY category, created_at DESC\";\r\n            const { results } = await env.DB.prepare(query).all();\r\n            return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n        }\r\n    } \r\n    \r\n    else if (request.method === 'POST') {\r\n        const service = await request.json();\r\n        const newId = `serv_${Date.now()}`;\r\n        const newSlug = generateSlug(service.title);\r\n        \r\n        await env.DB.prepare(\r\n            \"INSERT INTO services (id, title, description, price, image_url, status, category, long_description, slug, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\"\r\n        ).bind(\r\n            newId, \r\n            service.title, \r\n            service.description, \r\n            service.price, \r\n            service.image_url, \r\n            service.status, \r\n            service.category, \r\n            service.long_description, \r\n            newSlug, \r\n            new Date().toISOString()\r\n        ).run();\r\n        \r\n        return new Response(JSON.stringify({ id: newId }), { status: 201, headers: corsHeaders });\r\n    } \r\n    \r\n    else if (request.method === 'PUT' && serviceId) {\r\n        const service = await request.json();\r\n        const newSlug = generateSlug(service.title);\r\n        \r\n        await env.DB.prepare(\r\n            \"UPDATE services SET title = ?, description = ?, price = ?, image_url = ?, status = ?, category = ?, long_description = ?, slug = ? WHERE id = ?\"\r\n        ).bind(\r\n            service.title, \r\n            service.description, \r\n            service.price, \r\n            service.image_url, \r\n            service.status, \r\n            service.category, \r\n            service.long_description, \r\n            newSlug, \r\n            serviceId\r\n        ).run();\r\n        \r\n        return new Response(JSON.stringify({ id: serviceId }), { status: 200, headers: corsHeaders });\r\n    } \r\n    \r\n    else if (request.method === 'DELETE' && serviceId) {\r\n        await env.DB.prepare(\"DELETE FROM services WHERE id = ?\").bind(serviceId).run();\r\n        return new Response(null, { status: 204, headers: corsHeaders });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ error: \"Service route not found\" }), { status: 404, headers: corsHeaders });\r\n}", "// File: handlers/settings.js\r\n\r\nexport async function handleSettings(request, env, ctx) {\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    if (request.method === 'GET') {\r\n        const { results } = await env.DB.prepare(\"SELECT * FROM settings\").all();\r\n        return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n    } \r\n    \r\n    else if (request.method === 'PUT') {\r\n        const { key, value } = await request.json();\r\n        if (!key || value === undefined) {\r\n            return new Response(JSON.stringify({ error: \"Key and value are required\" }), { status: 400, headers: corsHeaders });\r\n        }\r\n        \r\n        await env.DB.prepare(\"INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)\")\r\n            .bind(key, value).run();\r\n            \r\n        return new Response(JSON.stringify({ message: \"Setting updated successfully\" }), { status: 200, headers: corsHeaders });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ error: \"Settings route not found or method not allowed\" }), { status: 404, headers: corsHeaders });\r\n}", "// File: handlers/admin.js\r\n\r\n// \u0646\u0633\u062A\u0648\u0631\u062F \u0648\u0638\u064A\u0641\u0629 \u0625\u0646\u0634\u0627\u0621 \u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0644\u0623\u0646\u0647\u0627 \u062A\u0633\u062A\u062E\u062F\u0645 \u0639\u0646\u062F \u0625\u0646\u0634\u0627\u0621 \u0648\u062A\u0639\u062F\u064A\u0644 \u0627\u0644\u0645\u0642\u0627\u0644\u0627\u062A\r\nimport { generateSlug } from '../utils/slug.js';\r\n\r\nexport async function handleAdmin(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const { pathname } = url;\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    // --- Admin Posts Logic ---\r\n    if (pathname.startsWith('/api/admin/posts')) {\r\n        const pathParts = pathname.split('/').filter(Boolean);\r\n        const postId = pathParts.length === 4 ? pathParts[3] : null;\r\n\r\n        if (request.method === 'GET') {\r\n            if (postId) {\r\n                const post = await env.DB.prepare(\"SELECT * FROM blog_posts WHERE id = ?\").bind(postId).first();\r\n                if (!post) return new Response(JSON.stringify({ error: \"Post not found\" }), { status: 404, headers: corsHeaders });\r\n                return new Response(JSON.stringify(post), { status: 200, headers: corsHeaders });\r\n            } else {\r\n                const { results } = await env.DB.prepare(\"SELECT id, title, slug, status, created_at FROM blog_posts ORDER BY created_at DESC\").all();\r\n                return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n            }\r\n        } \r\n        \r\n        else if (request.method === 'POST') {\r\n            const postData = await request.json();\r\n            const newPostId = `post_${Date.now()}`;\r\n            const slug = postData.slug || generateSlug(postData.title);\r\n            \r\n            await env.DB.prepare(\r\n                \"INSERT INTO blog_posts (id, title, slug, content, meta_title, meta_description, featured_image_url, tags, status, created_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\"\r\n            ).bind(\r\n                newPostId, postData.title, slug, postData.content, postData.meta_title, \r\n                postData.meta_description, postData.featured_image_url, \r\n                JSON.stringify(postData.tags || []), postData.status, new Date().toISOString()\r\n            ).run();\r\n            \r\n            return new Response(JSON.stringify({ id: newPostId, message: \"Post created successfully\" }), { status: 201, headers: corsHeaders });\r\n        } \r\n        \r\n        else if (request.method === 'PUT' && postId) {\r\n            const postData = await request.json();\r\n            const slug = postData.slug || generateSlug(postData.title);\r\n            \r\n            await env.DB.prepare(\r\n                \"UPDATE blog_posts SET title = ?, slug = ?, content = ?, meta_title = ?, meta_description = ?, featured_image_url = ?, tags = ?, status = ? WHERE id = ?\"\r\n            ).bind(\r\n                postData.title, slug, postData.content, postData.meta_title, \r\n                postData.meta_description, postData.featured_image_url, \r\n                JSON.stringify(postData.tags || []), postData.status, postId\r\n            ).run();\r\n\r\n            return new Response(JSON.stringify({ message: \"Post updated successfully\" }), { status: 200, headers: corsHeaders });\r\n        } \r\n        \r\n        else if (request.method === 'DELETE' && postId) {\r\n            await env.DB.prepare(\"DELETE FROM blog_posts WHERE id = ?\").bind(postId).run();\r\n            return new Response(JSON.stringify({ message: \"Post deleted successfully\" }), { status: 200, headers: corsHeaders });\r\n        }\r\n    }\r\n\r\n    // --- Admin Reviews Logic (Management Only) ---\r\n    else if (pathname.startsWith('/api/admin/reviews')) {\r\n        const pathParts = pathname.split('/').filter(Boolean);\r\n        const reviewId = pathParts.length > 3 ? pathParts[3] : null;\r\n\r\n        // Note: POST logic has been moved to a public handler\r\n        \r\n        if (request.method === 'GET') {\r\n            const { results } = await env.DB.prepare(\"SELECT id, orderId, serviceName, customerName, rating, comment, status, createdAt FROM reviews ORDER BY createdAt DESC\").all();\r\n            return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n        } \r\n        \r\n        else if (request.method === 'PUT' && reviewId) {\r\n            const { status } = await request.json();\r\n            if (!['pending', 'approved'].includes(status)) {\r\n                return new Response(JSON.stringify({ error: \"Invalid status\" }), { status: 400, headers: corsHeaders });\r\n            }\r\n            await env.DB.prepare(\"UPDATE reviews SET status = ? WHERE id = ?\").bind(status, reviewId).run();\r\n            return new Response(JSON.stringify({ message: \"Review updated successfully\" }), { status: 200, headers: corsHeaders });\r\n        } \r\n        \r\n        else if (request.method === 'DELETE' && reviewId) {\r\n            await env.DB.prepare(\"DELETE FROM reviews WHERE id = ?\").bind(reviewId).run();\r\n            return new Response(JSON.stringify({ message: \"Review deleted successfully\" }), { status: 200, headers: corsHeaders });\r\n        }\r\n    }\r\n\r\n    // fallback for any unhandled admin routes\r\n    return new Response(JSON.stringify({ error: \"Admin route not found\" }), { status: 404, headers: corsHeaders });\r\n}\r\n", "// File: handlers/posts.js\r\n\r\nexport async function handlePosts(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const { pathname } = url;\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    const pathParts = pathname.split('/').filter(Boolean);\r\n    \r\n    // \u062A\u062D\u062F\u064A\u062F \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u0637\u0644\u0628 \u064A\u0628\u062D\u062B \u0639\u0646 \u0645\u0642\u0627\u0644 \u0645\u0639\u064A\u0646 \u0639\u0628\u0631 \u0631\u0627\u0628\u0637\u0647 (slug)\r\n    const isSlugRoute = pathParts.length > 2 && pathParts[2] === 'slug';\r\n    const slug = isSlugRoute ? decodeURIComponent(pathParts.slice(3).join('/')) : null;\r\n\r\n    if (request.method === 'GET') {\r\n        if (slug) {\r\n            // \u062C\u0644\u0628 \u0645\u0642\u0627\u0644 \u0648\u0627\u062D\u062F \u0628\u0646\u0627\u0621\u064B \u0639\u0644\u0649 \u0631\u0627\u0628\u0637\u0647\r\n            const post = await env.DB.prepare(\"SELECT * FROM blog_posts WHERE slug = ? AND status = 'published'\").bind(slug).first();\r\n            \r\n            if (!post) {\r\n                return new Response(JSON.stringify({ error: \"Post not found or not published\" }), { status: 404, headers: corsHeaders });\r\n            }\r\n            return new Response(JSON.stringify(post), { status: 200, headers: corsHeaders });\r\n\r\n        } else {\r\n            // \u062C\u0644\u0628 \u0642\u0627\u0626\u0645\u0629 \u0645\u062E\u062A\u0635\u0631\u0629 \u0628\u0643\u0644 \u0627\u0644\u0645\u0642\u0627\u0644\u0627\u062A \u0627\u0644\u0645\u0646\u0634\u0648\u0631\u0629\r\n            const { results } = await env.DB.prepare(\r\n                \"SELECT id, title, slug, meta_description, featured_image_url, created_at FROM blog_posts WHERE status = 'published' ORDER BY created_at DESC\"\r\n            ).all();\r\n            return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n        }\r\n    }\r\n\r\n    return new Response(JSON.stringify({ error: \"Public posts route not found\" }), { status: 404, headers: corsHeaders });\r\n}", "// File: handlers/tickets.js\r\n\r\nimport { sendEmailWithResend, getNewMessageNotificationHTML, getSupportTicketConfirmationHTML, getAdminNewTicketNotificationHTML } from '../emails/emails.js';\r\n\r\nexport async function handleTickets(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    const { pathname } = url;\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    const pathParts = pathname.split('/').filter(Boolean);\r\n    let ticketId = pathParts.find(part => part.startsWith('ticket_'));\r\n    const isMessagesRoute = pathParts.includes('messages');\r\n\r\n    // --- GET: Fetch ticket data ---\r\n    if (request.method === \"GET\") {\r\n        const userId = url.searchParams.get('userId');\r\n        \r\n        if (ticketId) { // Find a specific ticket and its messages\r\n            const ticketInfo = await env.DB.prepare(\"SELECT * FROM support_tickets WHERE id = ?\").bind(ticketId).first();\r\n            if (!ticketInfo) return new Response(JSON.stringify({ error: \"Ticket not found\" }), { status: 404, headers: corsHeaders });\r\n\r\n            const { results: messages } = await env.DB.prepare(\"SELECT * FROM support_messages WHERE ticketId = ? ORDER BY createdAt ASC\").bind(ticketId).all();\r\n            \r\n            return new Response(JSON.stringify({ ticket: ticketInfo, messages: messages }), { status: 200, headers: corsHeaders });\r\n        } \r\n        else if (userId) { // Get all tickets for a specific user\r\n            const { results } = await env.DB.prepare(\"SELECT * FROM support_tickets WHERE userId = ? ORDER BY updatedAt DESC\").bind(userId).all();\r\n            return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n        } \r\n        else { // Get all tickets (for admin)\r\n            const { results } = await env.DB.prepare(\"SELECT * FROM support_tickets ORDER BY updatedAt DESC\").all();\r\n            return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n        }\r\n    } \r\n    \r\n    // --- POST: Add a new message to an existing ticket ---\r\n    else if (request.method === \"POST\" && ticketId && isMessagesRoute) {\r\n        const formData = await request.formData();\r\n        const sender = formData.get('sender'); // Should be 'user' or 'admin'\r\n        const message = formData.get('message');\r\n        const now = new Date().toISOString();\r\n\r\n        if (!sender || !message) {\r\n            return new Response(JSON.stringify({ error: \"Sender and message are required.\" }), { status: 400, headers: corsHeaders });\r\n        }\r\n\r\n        const messageData = {\r\n            id: `msg_${Date.now()}`,\r\n            ticketId: ticketId,\r\n            sender: sender,\r\n            message: message,\r\n            attachmentUrl: null,\r\n            createdAt: now\r\n        };\r\n\r\n        const attachmentFile = formData.get('attachment');\r\n        if (attachmentFile && typeof attachmentFile.name === 'string' && attachmentFile.name) {\r\n            if (!env.RECEIPTS_BUCKET || !env.R2_PUBLIC_URL) throw new Error(\"R2 bucket for attachments is not configured.\");\r\n            const fileName = `attachments/${ticketId}/${Date.now()}-${attachmentFile.name.replace(/[^a-zA-Z0-9._-]/g, '_')}`;\r\n            await env.RECEIPTS_BUCKET.put(fileName, attachmentFile.stream(), { httpMetadata: { contentType: attachmentFile.type } });\r\n            messageData.attachmentUrl = `${env.R2_PUBLIC_URL.replace(/\\/$/, '')}/${fileName}`;\r\n        }\r\n\r\n        await env.DB.prepare(\"INSERT INTO support_messages (id, ticketId, sender, message, attachmentUrl, createdAt) VALUES (?, ?, ?, ?, ?, ?)\")\r\n            .bind(...Object.values(messageData)).run();\r\n        \r\n        await env.DB.prepare(\"UPDATE support_tickets SET updatedAt = ?, lastReplier = ? WHERE id = ?\")\r\n            .bind(now, sender, ticketId).run();\r\n        \r\n        // Send email notification to the other party\r\n        const ticketInfo = await env.DB.prepare(\"SELECT userId FROM support_tickets WHERE id = ?\").bind(ticketId).first();\r\n        if (sender === 'admin' && ticketInfo) {\r\n            // Find user's email to send notification\r\n            if (ticketInfo.userId !== 'guest-user') {\r\n                const userInfo = await env.DB.prepare(\"SELECT email FROM users WHERE id = ?\").bind(ticketInfo.userId).first();\r\n                if (userInfo && userInfo.email) {\r\n                    ctx.waitUntil(sendEmailWithResend({ to: userInfo.email, subject: `\u0644\u062F\u064A\u0643 \u0631\u062F \u062C\u062F\u064A\u062F \u0639\u0644\u0649 \u062A\u0630\u0643\u0631\u062A\u0643 #${ticketId}`, html: getNewMessageNotificationHTML(ticketId) }, env));\r\n                }\r\n            }\r\n        } else if (sender === 'user') {\r\n            // Notify admin of a new user reply\r\n            ctx.waitUntil(sendEmailWithResend({ to: 'support@khadamatmaroc.co.uk', subject: `\u0631\u062F \u062C\u062F\u064A\u062F \u0645\u0646 \u0645\u0633\u062A\u062E\u062F\u0645 \u0639\u0644\u0649 \u0627\u0644\u062A\u0630\u0643\u0631\u0629 #${ticketId}`, html: getNewMessageNotificationHTML(ticketId) }, env));\r\n        }\r\n\r\n        return new Response(JSON.stringify(messageData), { status: 201, headers: corsHeaders });\r\n    }\r\n    \r\n    // --- POST: Create a new ticket ---\r\n    else if (request.method === \"POST\") {\r\n        const formData = await request.formData();\r\n        const newTicketId = `ticket_${Date.now()}`;\r\n        const now = new Date().toISOString();\r\n        \r\n        const ticketData = {\r\n            id: newTicketId,\r\n            userId: formData.get('userId') || 'guest-user',\r\n            subject: formData.get('subject'),\r\n            status: 'open',\r\n            createdAt: now,\r\n            updatedAt: now,\r\n            lastReplier: 'user' // The user is the first replier\r\n        };\r\n\r\n        const messageData = {\r\n            id: `msg_${Date.now()}`,\r\n            ticketId: newTicketId,\r\n            sender: 'user',\r\n            message: formData.get('message'),\r\n            attachmentUrl: null,\r\n            createdAt: now\r\n        };\r\n\r\n        const attachmentFile = formData.get('attachmentFile'); // Ensure this matches the form name\r\n        if (attachmentFile && typeof attachmentFile.name === 'string' && attachmentFile.name) {\r\n            if (!env.RECEIPTS_BUCKET || !env.R2_PUBLIC_URL) throw new Error(\"R2 bucket for attachments is not configured.\");\r\n            const fileName = `attachments/${newTicketId}/${Date.now()}-${attachmentFile.name.replace(/[^a-zA-Z0-9._-]/g, '_')}`;\r\n            await env.RECEIPTS_BUCKET.put(fileName, attachmentFile.stream(), { httpMetadata: { contentType: attachmentFile.type } });\r\n            messageData.attachmentUrl = `${env.R2_PUBLIC_URL.replace(/\\/$/, '')}/${fileName}`;\r\n        }\r\n\r\n        await env.DB.prepare(\"INSERT INTO support_tickets (id, userId, subject, status, createdAt, updatedAt, lastReplier) VALUES (?, ?, ?, ?, ?, ?, ?)\")\r\n            .bind(...Object.values(ticketData)).run();\r\n        \r\n        await env.DB.prepare(\"INSERT INTO support_messages (id, ticketId, sender, message, attachmentUrl, createdAt) VALUES (?, ?, ?, ?, ?, ?)\")\r\n            .bind(...Object.values(messageData)).run();\r\n        \r\n        const emailInfo = {\r\n            userName: formData.get('name'),\r\n            userEmail: formData.get('email')\r\n        };\r\n        const fullTicketInfoForEmail = {...ticketData, ...emailInfo};\r\n        ctx.waitUntil(sendEmailWithResend({ to: emailInfo.userEmail, subject: `\u062A\u0645 \u0627\u0633\u062A\u0644\u0627\u0645 \u062A\u0630\u0643\u0631\u062A\u0643 \u0631\u0642\u0645: ${ticketData.id}`, html: getSupportTicketConfirmationHTML(fullTicketInfoForEmail) }, env));\r\n        ctx.waitUntil(sendEmailWithResend({ to: 'support@khadamatmaroc.co.uk', subject: `\u062A\u0630\u0643\u0631\u0629 \u062F\u0639\u0645 \u062C\u062F\u064A\u062F\u0629: ${ticketData.subject}`, html: getAdminNewTicketNotificationHTML(fullTicketInfoForEmail) }, env));\r\n\r\n        return new Response(JSON.stringify({ success: true, ticketId: newTicketId }), { status: 201, headers: corsHeaders });\r\n    }\r\n\r\n    // --- PUT: Update ticket status (e.g., close) ---\r\n    else if (request.method === \"PUT\" && ticketId) {\r\n        const { status } = await request.json();\r\n        if (!['open', 'closed'].includes(status)) return new Response(JSON.stringify({ error: \"Invalid status\" }), { status: 400, headers: corsHeaders });\r\n        \r\n        await env.DB.prepare(\"UPDATE support_tickets SET status = ?, updatedAt = ? WHERE id = ?\")\r\n            .bind(status, new Date().toISOString(), ticketId).run();\r\n\r\n        return new Response(JSON.stringify({ message: \"Ticket status updated\" }), { status: 200, headers: corsHeaders });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ error: \"Ticket route not found\" }), { status: 404, headers: corsHeaders });\r\n}\r\n", "// File: handlers/subscribe.js\r\n\r\n// \u0646\u0633\u062A\u0648\u0631\u062F \u0648\u0638\u0627\u0626\u0641 \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0627\u0644\u062A\u064A \u0633\u0646\u062D\u062A\u0627\u062C\u0647\u0627\r\nimport { sendEmailWithResend, getSubscriptionConfirmationHTML } from '../emails/emails.js';\r\n\r\nexport async function handleSubscribe(request, env, ctx) {\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    if (request.method !== 'POST') {\r\n        return new Response(JSON.stringify({ error: \"Method not allowed\" }), { status: 405, headers: corsHeaders });\r\n    }\r\n\r\n    try {\r\n        const { email } = await request.json();\r\n\r\n        if (!email || !email.includes('@')) {\r\n            return new Response(JSON.stringify({ error: \"Please provide a valid email address.\" }), { status: 400, headers: corsHeaders });\r\n        }\r\n\r\n        // (\u0646\u0641\u062A\u0631\u0636 \u0623\u0646 \u0644\u062F\u064A\u0643 \u062C\u062F\u0648\u0644\u0627\u064B \u0628\u0627\u0633\u0645 \"subscribers\" \u064A\u062D\u062A\u0648\u064A \u0639\u0644\u0649 \u062D\u0642\u0644 \"email\" \u0648 \"createdAt\")\r\n        await env.DB.prepare(\r\n            \"INSERT INTO subscribers (email, createdAt) VALUES (?, ?)\"\r\n        ).bind(email, new Date().toISOString()).run();\r\n\r\n        // \u0625\u0631\u0633\u0627\u0644 \u0628\u0631\u064A\u062F \u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0644\u062A\u0623\u0643\u064A\u062F \u0627\u0644\u0627\u0634\u062A\u0631\u0627\u0643\r\n        ctx.waitUntil(sendEmailWithResend({\r\n            to: email,\r\n            subject: '\u2705 \u062A\u0645 \u062A\u0623\u0643\u064A\u062F \u0627\u0634\u062A\u0631\u0627\u0643\u0643 \u0641\u064A \u0627\u0644\u0646\u0634\u0631\u0629 \u0627\u0644\u0628\u0631\u064A\u062F\u064A\u0629!',\r\n            html: getSubscriptionConfirmationHTML()\r\n        }, env));\r\n\r\n        return new Response(JSON.stringify({ success: true, message: \"Subscription successful!\" }), { status: 201, headers: corsHeaders });\r\n\r\n    } catch (e) {\r\n        // \u0627\u0644\u062A\u0639\u0627\u0645\u0644 \u0645\u0639 \u062D\u0627\u0644\u0629 \u0627\u0644\u0628\u0631\u064A\u062F \u0627\u0644\u0625\u0644\u0643\u062A\u0631\u0648\u0646\u064A \u0627\u0644\u0645\u0643\u0631\u0631\r\n        if (e.message.includes('UNIQUE constraint failed')) {\r\n            return new Response(JSON.stringify({ error: \"This email is already subscribed.\" }), { status: 409, headers: corsHeaders });\r\n        }\r\n        console.error(\"Subscription Error:\", e);\r\n        return new Response(JSON.stringify({ error: \"An internal error occurred.\" }), { status: 500, headers: corsHeaders });\r\n    }\r\n}", "// File: handlers/reviews.js\r\n\r\nexport async function handleReviews(request, env, ctx) {\r\n    const corsHeaders = { \"Access-Control-Allow-Origin\": \"*\" };\r\n\r\n    if (request.method === 'POST') {\r\n        try {\r\n            const reviewData = await request.json();\r\n            const newReviewId = `review_${Date.now()}`;\r\n\r\n            // Basic validation\r\n            if (!reviewData.orderId || !reviewData.serviceName || !reviewData.customerName || !reviewData.rating) {\r\n                return new Response(JSON.stringify({ error: \"Missing required review fields.\" }), { status: 400, headers: corsHeaders });\r\n            }\r\n\r\n            await env.DB.prepare(\r\n                \"INSERT INTO reviews (id, orderId, serviceName, customerName, rating, comment, status, createdAt) VALUES (?, ?, ?, ?, ?, ?, 'pending', ?)\"\r\n            ).bind(\r\n                newReviewId,\r\n                reviewData.orderId,\r\n                reviewData.serviceName,\r\n                reviewData.customerName,\r\n                reviewData.rating,\r\n                reviewData.comment || '', // Ensure comment is not null\r\n                new Date().toISOString()\r\n            ).run();\r\n\r\n            return new Response(JSON.stringify({ success: true, reviewId: newReviewId }), { status: 201, headers: corsHeaders });\r\n        } catch (e) {\r\n            console.error(\"Review submission error:\", e);\r\n            return new Response(JSON.stringify({ error: \"Failed to save review.\", details: e.message }), { status: 500, headers: corsHeaders });\r\n        }\r\n    }\r\n\r\n    // For public GET requests, you might want to show approved reviews\r\n    if (request.method === 'GET') {\r\n        const { results } = await env.DB.prepare(\"SELECT serviceName, customerName, rating, comment FROM reviews WHERE status = 'approved' ORDER BY createdAt DESC\").all();\r\n        return new Response(JSON.stringify(results), { status: 200, headers: corsHeaders });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ error: \"Method not allowed for this route\" }), { status: 405, headers: corsHeaders });\r\n}\r\n", "// File: index.js\r\n\r\nimport { handleEmails } from './emails/emails.js';\r\nimport { handleUsers } from './handlers/users.js';\r\nimport { handleOrders } from './handlers/orders.js';\r\nimport { handleServices } from './handlers/services.js';\r\nimport { handleSettings } from './handlers/settings.js';\r\nimport { handleAdmin } from './handlers/admin.js';\r\nimport { handlePosts } from './handlers/posts.js';\r\nimport { handleTickets } from './handlers/tickets.js';\r\nimport { handleSubscribe } from './handlers/subscribe.js';\r\nimport { handleReviews } from './handlers/reviews.js';\r\n\r\n// --- \u062F\u0627\u0644\u0629 \u0645\u0633\u0627\u0639\u062F\u0629 \u0645\u0631\u0643\u0632\u064A\u0629 \u0644\u0625\u0636\u0627\u0641\u0629 \u062A\u0635\u0627\u0631\u064A\u062D CORS ---\r\nfunction withCors(response) {\r\n    const corsHeaders = {\r\n        \"Access-Control-Allow-Origin\": \"*\", // \u064A\u0645\u0643\u0646\u0643 \u062A\u063A\u064A\u064A\u0631\u0647 \u0625\u0644\u0649 \u0646\u0637\u0627\u0642 \u0645\u0648\u0642\u0639\u0643 \u0641\u0642\u0637 \u0644\u0645\u0632\u064A\u062F \u0645\u0646 \u0627\u0644\u0623\u0645\u0627\u0646\r\n        \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, OPTIONS\",\r\n        \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\",\r\n    };\r\n    \r\n    // \u062A\u0623\u0643\u062F \u0645\u0646 \u0623\u0646 \u0627\u0644\u0631\u062F \u0647\u0648 \u0643\u0627\u0626\u0646 Response \u0635\u0627\u0644\u062D\r\n    if (!(response instanceof Response)) {\r\n        response = new Response(\"Internal error\", { status: 500 });\r\n    }\r\n\r\n    // \u0623\u0636\u0641 \u0627\u0644\u062A\u0635\u0627\u0631\u064A\u062D \u0625\u0644\u0649 \u0627\u0644\u0631\u062F\r\n    Object.entries(corsHeaders).forEach(([key, value]) => {\r\n        response.headers.set(key, value);\r\n    });\r\n\r\n    return response;\r\n}\r\n\r\nexport default {\r\n    async fetch(request, env, ctx) {\r\n        const url = new URL(request.url);\r\n        const { pathname } = url;\r\n\r\n        // \u062A\u0639\u0627\u0645\u0644 \u0645\u0639 \u0637\u0644\u0628\u0627\u062A OPTIONS \u0623\u0648\u0644\u0627\u064B (\u0645\u0647\u0645 \u062C\u062F\u0627\u064B \u0644\u0640 CORS)\r\n        if (request.method === \"OPTIONS\") {\r\n            return withCors(new Response(null, { status: 204 }));\r\n        }\r\n\r\n        let response;\r\n        try {\r\n            // --- The Router ---\r\n            if (pathname === '/api/send-verification-email') {\r\n                response = await handleEmails(request, env, ctx);\r\n            } else if (pathname === '/api/subscribe') {\r\n                response = await handleSubscribe(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/reviews')) {\r\n                response = await handleReviews(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/tickets') || pathname.startsWith('/tickets')) {\r\n                response = await handleTickets(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/orders') || pathname.startsWith('/orders')) {\r\n                response = await handleOrders(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/users') || pathname.startsWith('/users')) {\r\n                response = await handleUsers(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/services') || pathname.startsWith('/services')) {\r\n                response = await handleServices(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/posts')) {\r\n                response = await handlePosts(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/settings') || pathname.startsWith('/settings')) {\r\n                response = await handleSettings(request, env, ctx);\r\n            } else if (pathname.startsWith('/api/admin/')) {\r\n                response = await handleAdmin(request, env, ctx);\r\n            } else {\r\n                response = new Response(JSON.stringify({ error: \"Route not found\" }), { status: 404, headers: { 'Content-Type': 'application/json' }});\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error('Critical Error in Worker:', error.message, error.stack);\r\n            response = new Response(JSON.stringify({ error: \"Internal Server Error: \" + error.message }), { status: 500, headers: { 'Content-Type': 'application/json' }});\r\n        }\r\n        \r\n        // --- \u0642\u0645 \u0628\u062A\u0637\u0628\u064A\u0642 \u062A\u0635\u0627\u0631\u064A\u062D CORS \u0639\u0644\u0649 \u0643\u0644 \u0627\u0644\u0631\u062F\u0648\u062F \u0641\u064A \u0627\u0644\u0646\u0647\u0627\u064A\u0629 ---\r\n        return withCors(response);\r\n    },\r\n};"],
  "mappings": "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",
  "names": []
}
